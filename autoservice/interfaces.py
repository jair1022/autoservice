from typing import Protocol, List, Optional
from contextlib import contextmanager
from datetime import datetime
from .domain import Appointment, Customer, Invoice

class TimeProvider(Protocol):
    def now(self) -> datetime: ...

class EmailService(Protocol):
    def send(self, to: str, subject: str, body: str) -> None: ...

class AppointmentRepository(Protocol):
    def add(self, appt: Appointment) -> Appointment: ...
    def get(self, appt_id: int) -> Optional[Appointment]: ...
    def list_for_customer(self, customer_id: int) -> List[Appointment]: ...

class CustomerRepository(Protocol):
    def add(self, cust: Customer) -> Customer: ...
    def get_by_email(self, email: str) -> Optional[Customer]: ...
    def get(self, customer_id: int) -> Optional[Customer]: ...

class InvoiceRepository(Protocol):
    def add(self, inv: Invoice) -> Invoice: ...

class Database(Protocol):
    @contextmanager
    def transaction(self):
        yield
